/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **creatures**
   * - Table in database
   */
  export namespace creatures {
    export type Table = 'creatures';
    export interface Selectable {
      /**
      * **creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('creatures_id_seq'::regclass)`
      */
      id: number;
      /**
      * **creatures.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **creatures.price**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      price: number | null;
      /**
      * **creatures.health**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      health: number | null;
      /**
      * **creatures.attack**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      attack: number | null;
      /**
      * **creatures.defence**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      defence: number | null;
      /**
      * **creatures.speed**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      speed: number | null;
      /**
      * **creatures.magic**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      magic: number | null;
    }
    export interface JSONSelectable {
      /**
      * **creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('creatures_id_seq'::regclass)`
      */
      id: number;
      /**
      * **creatures.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name: string | null;
      /**
      * **creatures.price**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      price: number | null;
      /**
      * **creatures.health**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      health: number | null;
      /**
      * **creatures.attack**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      attack: number | null;
      /**
      * **creatures.defence**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      defence: number | null;
      /**
      * **creatures.speed**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      speed: number | null;
      /**
      * **creatures.magic**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      magic: number | null;
    }
    export interface Whereable {
      /**
      * **creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('creatures_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **creatures.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **creatures.price**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **creatures.health**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      health?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **creatures.attack**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      attack?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **creatures.defence**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      defence?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **creatures.speed**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      speed?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **creatures.magic**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      magic?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('creatures_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **creatures.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **creatures.price**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **creatures.health**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      health?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **creatures.attack**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      attack?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **creatures.defence**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      defence?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **creatures.speed**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      speed?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **creatures.magic**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      magic?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('creatures_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **creatures.name**
      * - `varchar` in database
      * - Nullable, no default
      */
      name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **creatures.price**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **creatures.health**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      health?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **creatures.attack**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      attack?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **creatures.defence**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      defence?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **creatures.speed**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      speed?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **creatures.magic**
      * - `int4` in database
      * - Nullable, default: `1`
      */
      magic?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'creatures_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user_creatures**
   * - Table in database
   */
  export namespace user_creatures {
    export type Table = 'user_creatures';
    export interface Selectable {
      /**
      * **user_creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_creatures_id_seq'::regclass)`
      */
      id: number;
      /**
      * **user_creatures.username**
      * - `varchar` in database
      * - Nullable, no default
      */
      username: string | null;
      /**
      * **user_creatures.creature_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature_id: number | null;
    }
    export interface JSONSelectable {
      /**
      * **user_creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_creatures_id_seq'::regclass)`
      */
      id: number;
      /**
      * **user_creatures.username**
      * - `varchar` in database
      * - Nullable, no default
      */
      username: string | null;
      /**
      * **user_creatures.creature_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature_id: number | null;
    }
    export interface Whereable {
      /**
      * **user_creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_creatures_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_creatures.username**
      * - `varchar` in database
      * - Nullable, no default
      */
      username?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user_creatures.creature_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user_creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_creatures_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **user_creatures.username**
      * - `varchar` in database
      * - Nullable, no default
      */
      username?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **user_creatures.creature_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user_creatures.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_creatures_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **user_creatures.username**
      * - `varchar` in database
      * - Nullable, no default
      */
      username?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **user_creatures.creature_id**
      * - `int4` in database
      * - Nullable, no default
      */
      creature_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'user_creatures_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = creatures.Table | user_creatures.Table;
    export type Selectable = creatures.Selectable | user_creatures.Selectable;
    export type JSONSelectable = creatures.JSONSelectable | user_creatures.JSONSelectable;
    export type Whereable = creatures.Whereable | user_creatures.Whereable;
    export type Insertable = creatures.Insertable | user_creatures.Insertable;
    export type Updatable = creatures.Updatable | user_creatures.Updatable;
    export type UniqueIndex = creatures.UniqueIndex | user_creatures.UniqueIndex;
    export type Column = creatures.Column | user_creatures.Column;
  
    export type AllBaseTables = [creatures.Table, user_creatures.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [creatures.Table, user_creatures.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "creatures": creatures.Selectable;
    "user_creatures": user_creatures.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "creatures": creatures.JSONSelectable;
    "user_creatures": user_creatures.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "creatures": creatures.Whereable;
    "user_creatures": user_creatures.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "creatures": creatures.Insertable;
    "user_creatures": user_creatures.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "creatures": creatures.Updatable;
    "user_creatures": user_creatures.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "creatures": creatures.UniqueIndex;
    "user_creatures": user_creatures.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "creatures": creatures.Column;
    "user_creatures": user_creatures.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "creatures": creatures.SQL;
    "user_creatures": user_creatures.SQL;
  }[T];

}
